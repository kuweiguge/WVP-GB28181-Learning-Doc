import{_ as t}from"./sngrep_register-zP4CnJnP.js";import{_ as d,r as n,o as c,c as l,a as o,b as e,d as r,w as h,e as a}from"./app-NmqmjXM3.js";const g="/WVP-GB28181-Learning-Doc/assets/sngrep_401-SWeP15mW.png",_="/WVP-GB28181-Learning-Doc/assets/sngrep_register2-QYSdpiK6.png",p="/WVP-GB28181-Learning-Doc/assets/sngrep_200-9zl-oD18.png",u={},I=o("h1",{id:"注册流程",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#注册流程","aria-hidden":"true"},"#"),e(" 注册流程")],-1),S={class:"custom-container tip"},m=o("p",{class:"custom-container-title"},"提示",-1),P=o("p",null,[o("code",null,"192.168.1.64:5060"),e("是摄像头，"),o("code",null,"192.168.1.15:6102"),e("是Java的SIP服务器")],-1),f=a('<h2 id="流程图" tabindex="-1"><a class="header-anchor" href="#流程图" aria-hidden="true">#</a> 流程图</h2><p><img src="'+t+'" alt=""></p><h2 id="流程描述" tabindex="-1"><a class="header-anchor" href="#流程描述" aria-hidden="true">#</a> 流程描述</h2><p>为方便理解，SIP代理简单理解为“摄像头”，SIP服务器简单理解为这个Java项目。 注册流程有以下四个步骤：</p><ul><li><strong>1.1</strong>、摄像头向Java服务，发送<code>REGISTER</code>注册请求，此时请求中未包含<code>Authorization</code>身份认证字段；</li><li><strong>1.2</strong>、Java服务向摄像头，发送响应<code>401 Unauthorized</code>，并在响应的消息头<code>WWW_Authenticate</code>字段中给出认证方式和参数；</li><li><strong>1.3</strong>、摄像头再次向Java服务，发送<code>REGISTER</code>注册请求，在请求的<code>Authorization</code>身份认证字段中携带身份认证信息；</li><li><strong>1.4</strong>、Java服务对请求进行验证，如果检查摄像头的身份认证通过，则向摄像头发送成功响应<code>200 OK</code>，否则发送拒绝服务响应<code>403 Forbidden</code>；</li></ul><h2 id="gb-t28181—2016-9-1-1-注册和注销基本要求" tabindex="-1"><a class="header-anchor" href="#gb-t28181—2016-9-1-1-注册和注销基本要求" aria-hidden="true">#</a> GB/T28181—2016 9.1.1 注册和注销基本要求</h2><ul><li>SIP客户端、网关、SIP设备、联网系统等 SIP代理(SIP UA)使用IETFRFC3261中定义的方法Register进行注册和注销。</li><li>注册和注销时应进行认证,认证方式应支持数字摘要认证方式,高安全级别的宜支持数字证书的认证方式,数字证书的格式符合附录I中的规定。</li><li><strong>SIP代理在注册过期时间到来之前,应向注册服务器进行刷新注册</strong>,<strong>刷新注册消息流程应与9.1.2.1的流程描述一致</strong>,并遵循IETFRFC3261对刷新注册的规定。</li><li><strong>若注册失败,SIP代理应间隔一定时间后继续发起注册过程,与上一次注册时间间隔应可调,一般情况下不应短于60s</strong>。</li><li><strong>系统、设备注册过期时间应可配置,缺省值为86400s(1d)</strong>,应在注册过期时间到来之前发送刷新注册消息,为SIP服务器预留适当刷新注册处理时间,<strong>注册过期时间不应短于3600s</strong>。</li><li>SIP代理注册成功则认为SIP服务器为在线状态,注册失败则认为SIP服务器为离线状态;</li><li>SIP服务器在SIP代理注册成功后认为其为在线状态,SIP代理注册过期则认为其为离线状态。</li></ul><h2 id="消息示范" tabindex="-1"><a class="header-anchor" href="#消息示范" aria-hidden="true">#</a> 消息示范</h2><div class="custom-container warning"><p class="custom-container-title">注意</p><p>注意观察整个注册流程中下面几个字段的变化规律：</p><p>Via的<strong>branch</strong>、From的<strong>tag</strong>、To的<strong>tag</strong>、<strong>Call-ID</strong></p></div><p>下面是四个流程的消息示范：</p><h3 id="_1-1-注册" tabindex="-1"><a class="header-anchor" href="#_1-1-注册" aria-hidden="true">#</a> 1.1 注册</h3><p><img src="'+t+'" alt=""></p><h3 id="_1-2-响应401-unauthorized" tabindex="-1"><a class="header-anchor" href="#_1-2-响应401-unauthorized" aria-hidden="true">#</a> 1.2 响应<code>401 Unauthorized</code></h3><p><img src="'+g+'" alt=""></p><h3 id="_1-3-注册-带认证信息" tabindex="-1"><a class="header-anchor" href="#_1-3-注册-带认证信息" aria-hidden="true">#</a> 1.3 注册(带认证信息)</h3><p><img src="'+_+'" alt=""></p><h3 id="_1-4-响应200-ok" tabindex="-1"><a class="header-anchor" href="#_1-4-响应200-ok" aria-hidden="true">#</a> 1.4 响应<code>200 OK</code></h3><p><img src="'+p+'" alt=""></p><h2 id="概念理解" tabindex="-1"><a class="header-anchor" href="#概念理解" aria-hidden="true">#</a> 概念理解</h2>',19),b={href:"https://tinyurl.com/56dnbaaw",target:"_blank",rel:"noopener noreferrer"},x=o("strong",null,"SIP会话",-1),v=o("strong",null,"SIP事务",-1),R=o("code",null,"Call-ID",-1),k=o("strong",null,"SIP会话",-1),E=a("<li>一个<strong>SIP事务</strong>是由一个请求和它的所有响应组成的，<strong>Via</strong>的<code>branch</code>唯一标识一个<strong>SIP事务</strong></li><li><strong>From</strong>的<code>tag</code>是在发起SIP会话时设置的，它与<strong>From</strong>中的<strong>URL</strong>和<strong>Call-ID</strong>一起，可以唯一标示一个SIP会话的一方。<strong>它在会话中保持不变</strong>。</li><li><strong>To</strong>的<code>tag</code>是在回复SIP响应时设置的，对于每个新的请求，在响应时都会填充一个新的<code>toTag</code></li>",3);function T(V,F){const s=n("RouterLink"),i=n("ExternalLinkIcon");return c(),l("div",null,[I,o("div",S,[m,P,o("p",null,[e("图片中的SIP消息查看工具是"),r(s,{to:"/data/sngrep.html"},{default:h(()=>[e("sngrep")]),_:1})])]),f,o("ul",null,[o("li",null,[e("在"),o("a",b,[e("SIP协议"),r(i)]),e("中,一个"),x,e("可能包含多个"),v,e("，"),R,e("唯一标识一个"),k]),E])])}const z=d(u,[["render",T],["__file","注册流程.html.vue"]]);export{z as default};
